# -*- coding: utf-8 -*-
"""customer churn prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pZhBl-SdamtsZKBech4Woc9Z1mBzQVA5
"""

import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import numpy as np
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn import svm
from sklearn.metrics import jaccard_score
from sklearn.metrics import f1_score
from sklearn.metrics import log_loss
from sklearn.metrics import confusion_matrix, accuracy_score
import sklearn.metrics as metrics
from sklearn.svm import SVC
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
import tensorflow as tf
import matplotlib.pyplot as plt

data = pd.read_csv("Churn_Modelling.csv")
data.head()

data_hotcoded = pd.get_dummies(data)
data_hotcoded.head()

features = data_hotcoded.drop(columns= ["Exited"])
label = data_hotcoded["Exited"]

x_train, x_test, y_train, y_test = train_test_split(features, label, test_size=0.2, random_state=42)

scaler = StandardScaler()

x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

LR = LogisticRegression(solver='liblinear')

LR.fit(x_train, y_train)

LogisticRegression(solver='liblinear')

predictions = LR.predict(x_test)

predict_proba = LR.predict_proba(x_test)

LR_Accuracy_Score = accuracy_score(y_test, predictions)

print(LR_Accuracy_Score)



"""Decison tree

"""

Tree = DecisionTreeClassifier()

Tree.fit(x_train, y_train)

DecisionTreeClassifier()

predictions = Tree.predict(x_test)

Tree_Accuracy_Score = accuracy_score(y_test, predictions)
Tree_JaccardIndex = jaccard_score(y_test, predictions)
Tree_F1_Score = f1_score(y_test, predictions)

print(Tree_Accuracy_Score)
print(Tree_JaccardIndex)
print(Tree_F1_Score)

"""KNN"""

knn = KNeighborsClassifier(n_neighbors=4)
knn.fit(x_train, y_train)

KNeighborsClassifier(n_neighbors=4)

predictions = knn.predict(x_test)

KNN_Accuracy_Score = accuracy_score(y_test, predictions)
KNN_JaccardIndex = jaccard_score(y_test, predictions)
KNN_F1_Score = f1_score(y_test, predictions)

print(KNN_Accuracy_Score)
print(KNN_JaccardIndex)
print(KNN_F1_Score)

"""Random Forest"""

from sklearn.ensemble import RandomForestClassifier

clf = RandomForestClassifier(n_estimators=200, random_state=42)
clf.fit(x_train, y_train)
y_pred = clf.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)

print("Accuracy:", accuracy)







